import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
import time

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤—ñ–≤
assets = {
    "–û–í–î–ü (–û–±–ª—ñ–≥–∞—Ü—ñ—ó –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó –¥–µ—Ä–∂–∞–≤–Ω–æ—ó –ø–æ–∑–∏–∫–∏)": "GC=F",
    "–î–æ–ª–∞—Ä –°–®–ê (–í–∞–ª—é—Ç–∞)": "EURUSD=X",
    "–ë—ñ—Ç–∫–æ—ó–Ω (–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)": "BTC-USD",
    "–ê–∫—Ü—ñ—ó Tesla (–í–∏—Ä–æ–±–Ω–∏–∫ –µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—ñ–≤)": "TSLA",
    "–ê–∫—Ü—ñ—ó Apple (–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è)": "AAPL",
    "–§'—é—á–µ—Ä—Å–∏ –Ω–∞ –∫–∞–≤—É (–°–∏—Ä–æ–≤–∏–Ω–∞)": "KC=F",
    "–§'—é—á–µ—Ä—Å–∏ –Ω–∞ –∫–∞–∫–∞–æ-–±–æ–±–∏ (–°–∏—Ä–æ–≤–∏–Ω–∞)": "CC=F",
    "–ó–æ–ª–æ—Ç–æ (–î–æ—Ä–æ–≥–æ—Ü—ñ–Ω–Ω–∏–π –º–µ—Ç–∞–ª)": "GC=F",
    "–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (–§–æ–Ω–¥ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ REITs)": "VNQ",
    "–û–í–î–ü": "GC=F",
    "–î–æ–ª–∞—Ä –°–®–ê": "EURUSD=X",
    "–ë—ñ—Ç–∫–æ—ó–Ω": "BTC-USD",
    "–ê–∫—Ü—ñ—ó Tesla": "TSLA",
    "–ê–∫—Ü—ñ—ó Apple": "AAPL",
    "–§'—é—á–µ—Ä—Å–∏ –Ω–∞ –∫–∞–≤—É": "KC=F",
    "–§'—é—á–µ—Ä—Å–∏ –Ω–∞ –∫–∞–∫–∞–æ-–±–æ–±–∏": "CC=F",
    "–ó–æ–ª–æ—Ç–æ": "GC=F",
    "–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (REITs)": "VNQ"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
@st.cache_data
def get_stock_data(tickers, retries=3, delay=5):
    for i in range(retries):
        try:
            data = yf.download(list(tickers.values()), period="360d", interval="1d", auto_adjust=True)
            if not data.empty:
                return data["Close"].dropna()
        except Exception as e:
            time.sleep(delay)
    return None

data = get_stock_data(assets)

st.write(f"–î–æ–≤–∂–∏–Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {len(data) if data is not None else 'None'}")

if data is not None and len(data) >= 246:
    data = data.iloc[-246:]  # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ —î —Ä—ñ–≤–Ω–æ 246 –¥–Ω—ñ–≤ –¥–∞–Ω–∏—Ö (–≤—Å—ñ —Ä–æ–±–æ—á—ñ –¥–Ω—ñ –∑–∞ —Ä—ñ–∫)
    data = data.iloc[-360:]  # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ —î —Ä—ñ–≤–Ω–æ 360 –¥–Ω—ñ–≤ –¥–∞–Ω–∏—Ö

if data is None or len(data) < 180:
    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
else:
    half_period = len(data) // 2  # –ü–æ–ª–æ–≤–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
    df_past = data.iloc[:123]  # –î–∞–Ω—ñ –≤—ñ–¥ t-246 –¥–æ t-123
st.write(f"–î–æ–≤–∂–∏–Ω–∞ df_past: {len(df_past)}")
st.write(f"–î–æ–≤–∂–∏–Ω–∞ df_past: {len(df_past)}")  # –î–∏–Ω–∞–º—ñ–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥ t-360d - t-180d  # –ü–µ—Ä—à—ñ 180 –¥–Ω—ñ–≤
df_future = data.iloc[123:]  # –î–∞–Ω—ñ –≤—ñ–¥ t-123 –¥–æ t
st.write(f"–î–æ–≤–∂–∏–Ω–∞ df_future: {len(df_future)}")
st.write(f"–î–æ–≤–∂–∏–Ω–∞ df_future: {len(df_future)}")  # –î–∏–Ω–∞–º—ñ–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥ t-360d - t  # –û—Å—Ç–∞–Ω–Ω—ñ 180 –¥–Ω—ñ–≤
    
st.title("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∞ –≥—Ä–∞")

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –∞–∫—Ç–∏–≤—ñ–≤
st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –∞–∫—Ç–∏–≤—ñ–≤ (–≤—ñ–¥ —Ä—ñ–∫ —Ç–æ–º—É –¥–æ 6 –º—ñ—Å—è—Ü—ñ–≤ —Ç–æ–º—É)")
df_past_display = data.iloc[:180]  # –¢–æ—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –≤—ñ–¥ t-360d –¥–æ t-180d
fig, axes = plt.subplots(4, 3, figsize=(15, 10))
axes = axes.flatten()
for i, col in enumerate(df_past_display.columns):
    axes[i].plot(df_past.index, df_past[col], label=col, color='blue')
    axes[i].set_title(f"{col}")
    axes[i].set_xlabel("–î–∞—Ç–∞")
    axes[i].set_ylabel("–¶—ñ–Ω–∞ ($)")
    axes[i].legend()
plt.tight_layout()
st.pyplot(fig)

st.subheader("–í–∞—à —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
st.write("–í–∏ –º–∞—î—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –∞–∫—Ç–∏–≤—ñ–≤, –∞ –ø–æ—Ç—ñ–º –æ–±—Ä–∞—Ç–∏, —è–∫ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –≤–∞—à —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π –∫–∞–ø—ñ—Ç–∞–ª.")
st.write("–ü–∞–º'—è—Ç–∞–π—Ç–µ, —â–æ –≤–∞—à –≤–∏–±—ñ—Ä –≤–ø–ª–∏–Ω–µ –Ω–∞ –∫—ñ–Ω—Ü–µ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")

investment = {}
total_money = 10000
total_percentage = 0

if st.button("–í–∏–ø–∞–¥–∫–æ–≤–æ"):
    remaining = 100
    random_weights = {}
    for i, asset in enumerate(df_past.columns):
        if i == len(df_past.columns) - 1:
            random_weights[asset] = remaining
        else:
            random_part = np.random.randint(0, remaining)
            random_weights[asset] = random_part
            remaining -= random_part
    investment = random_weights
else:
    investment = {}

for asset in df_past.columns:
    investment[asset] = st.slider(f"% –≤–∫–ª–∞—Å—Ç–∏ —É {asset}", 0, 100, 10)
    total_percentage += investment[asset]

if total_percentage != 100:
    st.warning("–°—É–º–∞ –≤—Å—ñ—Ö –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 100%!")
else:
    if st.button("–Ü–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏"):
        returns_past = df_past.pct_change().dropna()
        mean_returns = returns_past.mean()
        cov_matrix = returns_past.cov().to_numpy()
        num_assets = len(returns_past.columns)
        returns_future = (data.iloc[-1] / data.iloc[123]) - 1  # –î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ t-123 —ñ t
        
        def sharpe_ratio(weights):
            return -((weights @ mean_returns) / np.sqrt(weights @ cov_matrix @ weights))
        
        def optimize_portfolio():
            init_guess = np.ones(num_assets) / num_assets
            bounds = tuple((0, 1) for _ in range(num_assets))
            constraints = ({'type': 'eq', 'fun': lambda w: np.sum(w) - 1})
            result = minimize(sharpe_ratio, init_guess, method='SLSQP', bounds=bounds, constraints=constraints)
            return result.x if result.success else init_guess
        
        optimal_weights_mpt = optimize_portfolio()
        
        portfolio_results = {
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å": sum([(investment[asset] / 100) * returns_future[asset] for asset in returns_past.columns]),
            "–ú–∞—Ä–∫–æ–≤—ñ—Ü (MPT)": sum([optimal_weights_mpt[i] * returns_future[returns_past.columns[i]] for i in range(num_assets)])
        }
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        for method, result in portfolio_results.items():
            absolute_return = total_money * (1 + result)
            relative_return = result * 100
            st.write(f"{method}: **{absolute_return:.2f} –≥—Ä–Ω** ({relative_return:.2f}%)")
        
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫–∏ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –∞–∫—Ç–∏–≤—ñ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥ (–≤—ñ–¥ —Ä—ñ–∫ —Ç–æ–º—É –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ)")
        fig, axes = plt.subplots(4, 3, figsize=(15, 10))
        axes = axes.flatten()
        for i, col in enumerate(data.columns):
            axes[i].plot(data.index, data[col], label=col, color='blue')
            axes[i].axvline(data.index[half_period - 1], color='red', linestyle='--', label="–ú–æ–º–µ–Ω—Ç —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
            axes[i].set_title(f"{col}")
            axes[i].set_xlabel("–î–∞—Ç–∞")
            axes[i].set_ylabel("–¶—ñ–Ω–∞ ($)")
            axes[i].legend()
        plt.tight_layout()
        st.pyplot(fig)
        
        st.subheader("–ü–æ—è—Å–Ω–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É –ú–∞—Ä–∫–æ–≤—ñ—Ü–∞ (MPT)")
        st.write("–ú–µ—Ç–æ–¥ –ú–∞—Ä–∫–æ–≤—ñ—Ü–∞ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –≥—Ä–æ—à—ñ –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ —Ç–∞–∫, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ **–Ω–∞–π–±—ñ–ª—å—à–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –ø—Ä–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–º—É —Ä–∏–∑–∏–∫—É**. –Ü–¥–µ—è –ø—Ä–æ—Å—Ç–∞: **–Ω–µ –≤–∫–ª–∞–¥–∞—Ç–∏ –≤—Å–µ –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤**, –∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ **–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å**.")
        st.write("### –Ø–∫ –ø—Ä–∞—Ü—é—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è?")
        st.write("1. **–û—á—ñ–∫—É–≤–∞–Ω–∏–π –¥–æ—Ö—ñ–¥** –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É ‚Äì —Å–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏—Ä—ñ—Å—Ç –π–æ–≥–æ —Ü—ñ–Ω–∏ –∑–∞ –º–∏–Ω—É–ª–∏–π –ø–µ—Ä—ñ–æ–¥.")
        st.write("2. **–†–∏–∑–∏–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å)** ‚Äì –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ü—ñ–Ω–∞ –∞–∫—Ç–∏–≤—É –∫–æ–ª–∏–≤–∞–ª–∞—Å—è.")
        st.write("3. **–ö–æ—Ä–µ–ª—è—Ü—ñ—è –∞–∫—Ç–∏–≤—ñ–≤** ‚Äì —è–∫ —Ä—É—Ö –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É –ø–æ–≤'—è–∑–∞–Ω–∏–π —ñ–∑ —Ä—É—Ö–æ–º —ñ–Ω—à–æ–≥–æ.")
        st.write("–ú–µ—Ç–æ–¥ —à—É–∫–∞—î **–Ω–∞–π–∫—Ä–∞—â–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—ñ–≤**, —â–æ–±:")
        st.write("- –ó–º–µ–Ω—à–∏—Ç–∏ —Ä–∏–∑–∏–∫ (—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—ñ –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏).")
        st.write("- –û—Ç—Ä–∏–º–∞—Ç–∏ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–∏–π –ø—Ä–∏–±—É—Ç–æ–∫.")
        
        st.write("### –©–æ —Ç–∞–∫–µ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞?")
        st.write("–í—ñ–Ω –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ü—ñ–Ω–∏—Ç–∏, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ö–æ—Ä–æ—à–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å. –§–æ—Ä–º—É–ª–∞:")
        st.write("\( –®–∞—Ä–ø = rac{(–û—á—ñ–∫—É–≤–∞–Ω–∏–π –¥–æ—Ö—ñ–¥ - –ë–µ–∑—Ä–∏–∑–∏–∫–æ–≤–∞ —Å—Ç–∞–≤–∫–∞)}{–†–∏–∑–∏–∫} \)")
        st.write("- **–û—á—ñ–∫—É–≤–∞–Ω–∏–π –¥–æ—Ö—ñ–¥** ‚Äì —Å–µ—Ä–µ–¥–Ω—è –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
        st.write("- **–ë–µ–∑—Ä–∏–∑–∏–∫–æ–≤–∞ —Å—Ç–∞–≤–∫–∞** ‚Äì –¥–æ—Ö—ñ–¥, —è–∫–∏–π –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑ —Ä–∏–∑–∏–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–º).")
        st.write("- **–†–∏–∑–∏–∫** ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
        
        st.write("**–ß–∏–º –≤–∏—â–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞, —Ç–∏–º –≤–∏–≥—ñ–¥–Ω—ñ—à–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å!** üöÄ")
        st.write("–ú–µ—Ç–æ–¥ –ú–∞—Ä–∫–æ–≤—ñ—Ü–∞ —à—É–∫–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å, —è–∫–∏–π –º–∞–∫—Å–∏–º—ñ–∑—É—î –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞.")
        st.write("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —è–∫ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –¥–æ —Ä–∏–∑–∏–∫—É.")
        st.write("–§–æ—Ä–º—É–ª–∞ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –®–∞—Ä–ø–∞: **(–û—á—ñ–∫—É–≤–∞–Ω–∏–π –¥–æ—Ö—ñ–¥ –ø–æ—Ä—Ç—Ñ–µ–ª—è - –ë–µ–∑—Ä–∏–∑–∏–∫–æ–≤–∞ —Å—Ç–∞–≤–∫–∞) / –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è**")
        st.write("–ß–∏–º –≤–∏—â–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞, —Ç–∏–º –≤–∏–≥—ñ–¥–Ω—ñ—à–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å.")
