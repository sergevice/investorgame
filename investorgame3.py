import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

def get_asset_tickers():
    return {
        "Apple Inc. (AAPL)": "AAPL",
        "Tesla Inc. (TSLA)": "TSLA",
        "USD/UAH (–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞ –¥–æ –≥—Ä–∏–≤–Ω—ñ)": "USDUAH=X",
        "Gold (–ó–æ–ª–æ—Ç–æ)": "GC=F",
        "Cocoa Futures (–§'—é—á–µ—Ä—Å–∏ –Ω–∞ –∫–∞–∫–∞–æ)": "CC=F",
        "Coffee Futures (–§'—é—á–µ—Ä—Å–∏ –Ω–∞ –∫–∞–≤—É)": "KC=F",
        "Bitcoin to USD (–ë—ñ—Ç–∫–æ—ó–Ω –∑–∞ –¥–æ–ª–∞—Ä–∏)": "BTC-USD",
        "Ethereum to USD (–ï—Ñ—ñ—Ä –∑–∞ –¥–æ–ª–∞—Ä–∏)": "ETH-USD",
        "S&P 500 Index (SP500)": "^GSPC",
        "Real Estate Investment Trust (VNQ)": "VNQ"
    }

def get_stock_data(tickers, retries=3, delay=5):
    for i in range(retries):
        try:
            data = yf.download(list(tickers.values()), period="360d", interval="1d", auto_adjust=True)
            if not data.empty:
                return data["Close"].dropna()
        except Exception as e:
            time.sleep(delay)
    return None

def plot_price_dynamics(df, show):
    st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω –∞–∫—Ç–∏–≤—ñ–≤")
    fig, axes = plt.subplots(4, 3, figsize=(15, 12))
    axes = axes.flatten()
    
    date_index = df.index
    midpoint = len(date_index) // 2  # Halfway point to plot only first half of data
    
    for i, asset in enumerate(df.columns):
        if i >= 12:  # Limit to 12 charts
            break
        
        axes[i].plot(date_index, df[asset], color='orange', alpha=show)  # Full range for context
        axes[i].plot(date_index[:midpoint], df[asset].iloc[:midpoint], color='blue')  # First half of data
        axes[i].set_title(asset)
        axes[i].tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    st.pyplot(fig)

def calculate_returns(df):
    midpoint = len(df) // 2
    returns = (df.iloc[-1] - df.iloc[midpoint]) / df.iloc[midpoint]
    return returns.to_frame(name="–î–æ—Ö–æ–¥–Ω—ñ—Å—Ç—å")

def calculate_absolute_yield(df_yield, df_investments):
    """
    –û–±—á–∏—Å–ª—é—î –∞–±—Å–æ–ª—é—Ç–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
        df_yield (pd.DataFrame): DataFrame, –¥–µ —ñ–Ω–¥–µ–∫—Å–∏ - —Ç—ñ–∫–µ—Ä–∏ –∞–∫—Ç–∏–≤—ñ–≤, –∫–æ–ª–æ–Ω–∫–∞ "–î–æ—Ö–æ–¥–Ω—ñ—Å—Ç—å" –º—ñ—Å—Ç–∏—Ç—å –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É.
        df_investments (pd.DataFrame): DataFrame, –¥–µ –∫–æ–ª–æ–Ω–∫–∞ "–¢—ñ–∫–µ—Ä" –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–∫–µ—Ä–∏, "% –≤–∫–ª–∞–¥–µ–Ω–Ω—è" - –≤—ñ–¥—Å–æ—Ç–∫–∏, "–°—É–º–∞ (–ì–†–ù)" - —Å—É–º–∞ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è.
    
    –ü–æ–≤–µ—Ä—Ç–∞—î:
        pd.DataFrame: df_investments –∑ –¥–æ–¥–∞–Ω–æ—é –∫–æ–ª–æ–Ω–∫–æ—é "–ü—Ä–∏–±—É—Ç–æ–∫".
    """
    # –û–±'—î–¥–Ω—É—î–º–æ df_investments –∑ df_yield –∑–∞ —Ç—ñ–∫–µ—Ä–æ–º
    df_result = df_investments.merge(df_yield, left_on="–¢—ñ–∫–µ—Ä", right_index=True, how="left")
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É
    df_result["–ü—Ä–∏–±—É—Ç–æ–∫"] = df_result["–î–æ—Ö–æ–¥–Ω—ñ—Å—Ç—å"] * df_result["–°—É–º–∞ (–ì–†–ù)"]
    
    return df_result


def main():
    st.title("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∞ –≥—Ä–∞")
    st.write("–Ü–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –∑–∞–ø–æ—Ä—É–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –¥–æ–±—Ä–æ–±—É—Ç—É. –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, –í–∏ –Ω–∞–∑–±–∏—Ä–∞–ª–∏ 10 —Ç–∏—Å. –≥—Ä–Ω —ñ –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–º–Ω–æ–∂–∏—Ç–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è, –≤–∫–ª–∞–≤—à–∏ —ó—Ö —É —Ä—ñ–∑–Ω—ñ –∞–∫—Ç–∏–≤–∏. –ù–∏–∂—á–µ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω–æ 10 –º–æ–∂–ª–∏–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤ –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è:")
    
    assets = get_asset_tickers()
    for asset, ticker in assets.items():
        st.write(f"**{asset}**: `{ticker}`")
    
    st.write("–©–æ–± –æ–±—Ä–∞—Ç–∏ –∞–∫—Ç–∏–≤–∏, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –¥–∏–Ω–∞–º—ñ–∫–æ—é —ó—Ö —Ü—ñ–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤ –¥–æ –º–æ–º–µ–Ω—Ç—É —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫–∞—Ö:")

    data = get_stock_data(get_asset_tickers())
    st.write("–¶—ñ–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫:")
    plot_price_dynamics(data, 0)
    st.dataframe(data)
    
    st.write("–¢–µ–ø–µ—Ä —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ—Ç—å 10 —Ç–∏—Å. –≥—Ä–Ω —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –º—ñ–∂ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ —ñ –∑–±–µ—Ä—ñ—Ç—å –í–∞—à –ø–µ—Ä—à–∏–π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å!")

    st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π")
    st.title("–†–æ–∑–ø–æ–¥—ñ–ª —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π")
    st.write("–í–∏–±–µ—Ä—ñ—Ç—å, —Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –≤–∞—à–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤–∫–ª–∞–¥–∞—Ç–∏ –≤ –∫–æ–∂–µ–Ω –∞–∫—Ç–∏–≤.")
    
    assets = get_asset_tickers()
    total_investment = st.number_input("–°—É–º–∞ –¥–æ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–ì–†–ù)", min_value=0.0, value=1000.0, step=100.0)
    
    if "investment" not in st.session_state:
        st.session_state["investment"] = {asset: 0 for asset in assets.keys()}
    
    col1, col2 = st.columns([2, 1])
    
    with col2:
        for asset in assets.keys():
            if st.button(f"–í—Å–µ –≤ {asset}", key=f"btn_{asset}"):
                for reset_asset in assets.keys():
                    st.session_state["investment"][reset_asset] = 0
                st.session_state["investment"][asset] = 100
                st.rerun()
    
    total_percentage = 0
    with col1:
        for asset in assets.keys():
            st.session_state["investment"][asset] = st.slider(
                f"% –≤–∫–ª–∞—Å—Ç–∏ —É {asset}", 0, 100, st.session_state["investment"][asset], key=f"slider_{asset}"
            )
            total_percentage += st.session_state["investment"][asset]
    
    if total_percentage != 100:
        st.warning("–°—É–º–∞ –≤—Å—ñ—Ö –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 100%!")
    else:
        st.write("### –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π")
        df_investment = pd.DataFrame({
            "–¢—ñ–∫–µ—Ä": list(assets.values()),
            "–ê–∫—Ç–∏–≤": list(assets.keys()),
            "% –≤–∫–ª–∞–¥–µ–Ω–Ω—è": [st.session_state["investment"][asset] for asset in assets.keys()],
            "–°—É–º–∞ (–ì–†–ù)": [(st.session_state["investment"][asset] / 100) * total_investment for asset in assets.keys()]
        })
        st.dataframe(df_investment)
        
        if st.button("–Ü–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏"):
            st.success("–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            plot_price_dynamics(data, 1)
            df_yield = calculate_returns(data)
            user_yield = calculate_absolute_yield(df_yield, df_investment)
            st.dataframe(user_yield)
            total_initial = user_yield["–°—É–º–∞ (–ì–†–ù)"].sum()  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            total_profit = user_yield["–ü—Ä–∏–±—É—Ç–æ–∫"].sum()  # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            total_final = total_initial + total_profit  # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—ñ—Å–ª—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π

            st.write(f"üìà –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π: {total_initial:,.2f} –ì–†–ù")
            st.write(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –≤—ñ–¥ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π: {total_profit:,.2f} –ì–†–ù")
            st.write(f"üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—ñ—Å–ª—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π: {total_final:,.2f} –ì–†–ù")


if __name__ == "__main__":
    main()
